{% extends '@EasyAdmin/crud/index.html.twig' %}

{% block content_title %}
    {{ 'Email Management'|trans }}
{% endblock %}

{% block page_actions %}
    <a href="{{ path('admin', {
        crudAction: 'verifyEmails',
        crudControllerFqcn: 'App\\Controller\\Admin\\EmailCrudController'
    }) }}" id="verify-emails-button" class="btn btn-primary">
        Verify Emails
    </a>
    {{ parent() }}
{% endblock %}

{% block content %}
    <!-- Контейнер с Flexbox -->
    <div style="display: flex; flex-direction: column; align-items: center;">

        <!-- Таблица -->
        <div style="width: 100%; margin-bottom: 20px;">
            {{ parent() }}
        </div>

        <!-- Прогресс-бар -->
        <div id="verification-result" class="mt-3" style="display: none; width: 100%; text-align: center;">
            <div class="progress" style="margin: 0 auto; width: 50%;">
                <div
                        id="progress-bar"
                        class="progress-bar"
                        role="progressbar"
                        style="width: 0%;"
                        aria-valuenow="0"
                        aria-valuemin="0"
                        aria-valuemax="100">
                    0%
                </div>
            </div>
            <p id="status-text" class="mt-3">Starting verification...</p>
        </div>

        <!-- Диаграмма -->
        <div style="width: 600px; margin-top: 20px; text-align: center;">
            <h3>Email Verification Results</h3>
            <canvas
                    id="verificationChart"
                    data-controller="email-chart"
                    data-email-chart-none="{{ noneCount }}"
                    data-email-chart-valid="{{ validCount }}"
                    data-email-chart-unknown="{{ unknownCount }}"
                    data-email-chart-risky="{{ riskyCount }}"
                    data-email-chart-invalid="{{ invalidCount }}">
            </canvas>
        </div>
    </div>
{% endblock %}

{% block configured_javascripts %}
    {{ importmap('chart.js') }}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Прогресс-бар
            const button = document.querySelector('#verify-emails-button');
            const progressBar = document.getElementById('progress-bar');
            const statusText = document.getElementById('status-text');
            const verificationResult = document.getElementById('verification-result');

            button.addEventListener('click', function (evt) {
                evt.preventDefault();

                button.disabled = true;
                verificationResult.style.display = 'block';

                let page = 1;
                const limit = 10;

                function fetchEmails() {
                    fetch(`${button.href}&page=${page}&limit=${limit}`, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                        },
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                let completed = 0;
                                const total = data.results.length;

                                data.results.forEach((result, index) => {
                                    setTimeout(() => {
                                        completed++;
                                        const progress = Math.round((completed / total) * 100);
                                        progressBar.style.width = `${progress}%`;
                                        progressBar.setAttribute('aria-valuenow', `${progress}`);
                                        progressBar.textContent = `${progress}%`;

                                        if (completed === total) {
                                            if (data.hasNextPage) {
                                                page = data.nextPage;
                                                fetchEmails();
                                            } else {
                                                statusText.textContent = 'Verification completed successfully!';
                                                button.disabled = false;
                                            }
                                        }
                                    }, index * 500);
                                });
                            } else {
                                statusText.textContent = 'Verification failed.';
                                button.disabled = false;
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            statusText.textContent = 'Error occurred while verifying emails.';
                            button.disabled = false;
                        });
                }

                fetchEmails();
            });

            // Инициализация диаграммы
            const ctx = document.getElementById('verificationChart').getContext('2d');
            const chartData = {
                labels: ['None', 'Valid', 'Unknown', 'Risky', 'Invalid'],
                datasets: [{
                    label: 'Email Verification Results',
                    data: [
                        parseInt(document.getElementById('verificationChart').dataset.emailChartNone, 10),
                        parseInt(document.getElementById('verificationChart').dataset.emailChartValid, 10),
                        parseInt(document.getElementById('verificationChart').dataset.emailChartUnknown, 10),
                        parseInt(document.getElementById('verificationChart').dataset.emailChartRisky, 10),
                        parseInt(document.getElementById('verificationChart').dataset.emailChartInvalid, 10),
                    ],
                    backgroundColor: ['#cccccc', '#36a2eb', '#ffcd56', '#ff9f40', '#ff6384'],
                }]
            };

            const verificationChart = new Chart(ctx, {
                type: 'doughnut',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                    },
                },
            });
        });
    </script>
{% endblock %}
